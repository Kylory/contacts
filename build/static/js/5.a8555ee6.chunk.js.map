{"version":3,"sources":["components/Snackbar.jsx","components/RegisterView/RegisterView.module.css","components/RegisterView/RegisterView.jsx"],"names":["PositionedSnackbar","element","message","dispatch","useDispatch","React","useState","open","vertical","horizontal","state","setState","anchorOrigin","onClose","authOperations","module","exports","RegisterView","amount","name","email","password","weight","weightRange","showPassword","values","setValues","isButtonDisable","registerUserRejected","useSelector","authSelectors","useEffect","prop","handleChange","e","target","value","className","styles","regForm","noValidate","autoComplete","onSubmit","preventDefault","type","onChange","size","label","variant","htmlFor","event","endAdornment","position","iconButton","onClick","onMouseDown","edge","labelWidth","button","disabled"],"mappings":"4MAKe,SAASA,EAAT,GAAmD,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAC9CC,EAAWC,cAEjB,EAA0BC,IAAMC,SAAS,CACvCC,MAAM,EACNC,SAAU,MACVC,WAAY,WAHd,mBAAOC,EAAP,KAAcC,EAAd,KAMQH,EAA+BE,EAA/BF,SAAUC,EAAqBC,EAArBD,WAAYF,EAASG,EAATH,KAkB9B,OACE,8BACE,cAAC,IAAD,CACEK,aAAc,CAAEJ,WAAUC,cAC1BF,KAAMA,EACNM,QArBc,WAElB,OADAF,EAAS,2BAAKD,GAAN,IAAaH,MAAM,KACnBN,GACN,IAAK,oBACHE,EAASW,uBACT,MAEF,IAAK,uBACHX,EAASW,4BAcTZ,QAASA,GACJM,EAAWC,O,oBCtCxBM,EAAOC,QAAU,CAAC,QAAU,8BAA8B,KAAO,2BAA2B,MAAQ,4BAA4B,SAAW,+BAA+B,OAAS,+B,+QCgBpK,SAASC,IACtB,MAA4BX,mBAAS,CACnCY,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRC,YAAa,GACbC,cAAc,IAPhB,mBAAOC,EAAP,KAAeC,EAAf,KAUMC,EACY,KAAhBF,EAAON,MAAgC,KAAjBM,EAAOL,OAAoC,KAApBK,EAAOJ,SAChDO,EAAuBC,YAAYC,IAAcF,sBACjDzB,EAAWC,cAEjB2B,qBAAU,WACR5B,EAASW,4BACR,CAACX,IAEJ,IAgB0B6B,EALpBC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MACdV,EAAU,2BAAKD,GAAN,kBAAeN,EAAOiB,MAejC,OACE,qCACGR,GACC,cAAC,IAAD,CACE3B,QAAQ,uBACRC,QAAQ,2CAGZ,uBACEmC,UAAWC,IAAOC,QAClBC,YAAU,EACVC,aAAa,MACbC,SAxCe,SAACR,GACpBA,EAAES,iBACFxC,EACEW,eAA4B,CAC1BK,KAAMM,EAAON,KACbC,MAAOK,EAAOL,MACdC,SAAUI,EAAOJ,aA8BnB,UAME,cAAC,IAAD,CACEgB,UAAWC,IAAOnB,KAClBA,KAAK,OACLyB,KAAK,OACLR,MAAOX,EAAON,KACd0B,SAAUZ,EACVa,KAAK,QACLC,MAAM,OACNC,QAAQ,aAEV,cAAC,IAAD,CACEX,UAAWC,IAAOlB,MAClBD,KAAK,QACLyB,KAAK,QACLR,MAAOX,EAAOL,MACdyB,SAAUZ,EACVa,KAAK,QACLC,MAAM,QACNC,QAAQ,aAEV,eAAC,IAAD,CACEA,QAAQ,WACRF,KAAK,QACLT,UAAWC,IAAOjB,SAHpB,UAKE,cAAC,IAAD,CAAY4B,QAAQ,8BAApB,sBAGA,cAAC,IAAD,CACEL,KAAMnB,EAAOD,aAAe,OAAS,WACrCY,MAAOX,EAAOJ,SACdwB,UAzDgBb,EAyDW,WAzDF,SAACkB,GAClCxB,EAAU,2BAAKD,GAAN,kBAAeO,EAAOkB,EAAMf,OAAOC,WAyDpCe,aACE,cAAC,IAAD,CAAgBC,SAAS,MAAzB,SACE,cAAC,IAAD,CACEf,UAAWC,IAAOe,WAClB,aAAW,6BACXC,QA3DgB,WAC9B5B,EAAU,2BAAKD,GAAN,IAAcD,cAAeC,EAAOD,iBA2D/B+B,YAxDgB,SAACL,GAC/BA,EAAMP,kBAwDQa,KAAK,MALP,SAOG/B,EAAOD,aAAe,cAAC,IAAD,IAAiB,cAAC,IAAD,QAI9CiC,WAAY,QAGhB,cAAC,IAAD,CACEpB,UAAWC,IAAOoB,OAClBC,SAAUhC,EACViB,KAAK,SACLE,KAAK,QACLE,QAAQ,YALV","file":"static/js/5.a8555ee6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport * as authOperations from \"redux/auth/authOperations\";\r\n\r\nexport default function PositionedSnackbar({ element, message }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [state, setState] = React.useState({\r\n    open: true,\r\n    vertical: \"top\",\r\n    horizontal: \"center\",\r\n  });\r\n\r\n  const { vertical, horizontal, open } = state;\r\n\r\n  const handleClose = () => {\r\n    setState({ ...state, open: false });\r\n    switch (element) {\r\n      case \"logInUserRejected\":\r\n        dispatch(authOperations.logInUserRejected());\r\n        break;\r\n\r\n      case \"registerUserRejected\":\r\n        dispatch(authOperations.registerUserRejected());\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical, horizontal }}\r\n        open={open}\r\n        onClose={handleClose}\r\n        message={message}\r\n        key={vertical + horizontal}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regForm\":\"RegisterView_regForm__Gdhp4\",\"name\":\"RegisterView_name__2Q9Hl\",\"email\":\"RegisterView_email__11B1O\",\"password\":\"RegisterView_password__1kIW9\",\"button\":\"RegisterView_button__4BGFI\"};","import { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport * as authOperations from \"redux/auth/authOperations\";\r\nimport { authSelectors } from \"redux/auth\";\r\nimport PositionedSnackbar from \"../Snackbar\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\n\r\nimport styles from \"./RegisterView.module.css\";\r\n\r\nexport default function RegisterView() {\r\n  const [values, setValues] = useState({\r\n    amount: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    weight: \"\",\r\n    weightRange: \"\",\r\n    showPassword: false,\r\n  });\r\n\r\n  const isButtonDisable =\r\n    values.name === \"\" || values.email === \"\" || values.password === \"\";\r\n  const registerUserRejected = useSelector(authSelectors.registerUserRejected);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.registerUserRejected());\r\n  }, [dispatch]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      authOperations.registerUser({\r\n        name: values.name,\r\n        email: values.email,\r\n        password: values.password,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const PassHandleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {registerUserRejected && (\r\n        <PositionedSnackbar\r\n          element=\"registerUserRejected\"\r\n          message=\"Error, something went wrong, try again\"\r\n        />\r\n      )}\r\n      <form\r\n        className={styles.regForm}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <TextField\r\n          className={styles.name}\r\n          name=\"name\"\r\n          type=\"text\"\r\n          value={values.name}\r\n          onChange={handleChange}\r\n          size=\"small\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n        />\r\n        <TextField\r\n          className={styles.email}\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={values.email}\r\n          onChange={handleChange}\r\n          size=\"small\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n        />\r\n        <FormControl\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          className={styles.password}\r\n        >\r\n          <InputLabel htmlFor=\"outlined-adornment-password\">\r\n            Password\r\n          </InputLabel>\r\n          <OutlinedInput\r\n            type={values.showPassword ? \"text\" : \"password\"}\r\n            value={values.password}\r\n            onChange={PassHandleChange(\"password\")}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  className={styles.iconButton}\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                  edge=\"end\"\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n            labelWidth={70}\r\n          />\r\n        </FormControl>\r\n        <Button\r\n          className={styles.button}\r\n          disabled={isButtonDisable}\r\n          type=\"submit\"\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n        >\r\n          Register\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}