{"version":3,"sources":["components/Snackbar.jsx","components/LogInView/LogInView.module.css","components/LogInView/LogInView.jsx"],"names":["PositionedSnackbar","element","message","dispatch","useDispatch","React","useState","open","vertical","horizontal","state","setState","anchorOrigin","onClose","authOperations","module","exports","LogInView","amount","email","password","weight","weightRange","showPassword","values","setValues","isButtonDisable","logInUserRejected","useSelector","authSelectors","useEffect","prop","className","styles","logIn","noValidate","autoComplete","onSubmit","e","preventDefault","name","type","value","onChange","target","size","label","variant","htmlFor","event","endAdornment","position","iconButton","onClick","onMouseDown","edge","labelWidth","button","disabled"],"mappings":"4MAKe,SAASA,EAAT,GAAmD,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAC9CC,EAAWC,cAEjB,EAA0BC,IAAMC,SAAS,CACvCC,MAAM,EACNC,SAAU,MACVC,WAAY,WAHd,mBAAOC,EAAP,KAAcC,EAAd,KAMQH,EAA+BE,EAA/BF,SAAUC,EAAqBC,EAArBD,WAAYF,EAASG,EAATH,KAkB9B,OACE,8BACE,cAAC,IAAD,CACEK,aAAc,CAAEJ,WAAUC,cAC1BF,KAAMA,EACNM,QArBc,WAElB,OADAF,EAAS,2BAAKD,GAAN,IAAaH,MAAM,KACnBN,GACN,IAAK,oBACHE,EAASW,uBACT,MAEF,IAAK,uBACHX,EAASW,4BAcTZ,QAASA,GACJM,EAAWC,O,oBCtCxBM,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,MAAQ,yBAAyB,SAAW,4BAA4B,OAAS,4B,+QCgBrH,SAASC,IACtB,MAA4BX,mBAAS,CACnCY,OAAQ,GACRC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRC,YAAa,GACbC,cAAc,IANhB,mBAAOC,EAAP,KAAeC,EAAf,KASMC,EAAmC,KAAjBF,EAAOL,OAAoC,KAApBK,EAAOJ,SAChDO,EAAoBC,YAAYC,IAAcF,mBAC9CxB,EAAWC,cAEjB0B,qBAAU,WACR3B,EAASW,yBACR,CAACX,IAEJ,IAY0B4B,EAY1B,OACE,qCACGJ,GACC,cAAC,IAAD,CACE1B,QAAQ,oBACRC,QAAQ,2CAGZ,uBACE8B,UAAWC,IAAOC,MAClBC,YAAU,EACVC,aAAa,MACbC,SApCe,SAACC,GACpBA,EAAEC,iBACFpC,EACEW,QAAqB,CAAEK,MAAOK,EAAOL,MAAOC,SAAUI,EAAOJ,aA6B7D,UAME,cAAC,IAAD,CACEY,UAAWC,IAAOd,MAClBqB,KAAK,QACLC,KAAK,QACLC,MAAOlB,EAAOL,MACdwB,SApCa,SAACL,GACpB,MAAwBA,EAAEM,OAAlBJ,EAAR,EAAQA,KAAME,EAAd,EAAcA,MACdjB,EAAU,2BAAKD,GAAN,kBAAegB,EAAOE,MAmCzBG,KAAK,QACLC,MAAM,QACNC,QAAQ,aAGV,eAAC,IAAD,CACEA,QAAQ,WACRF,KAAK,QACLb,UAAWC,IAAOb,SAHpB,UAKE,cAAC,IAAD,CAAY4B,QAAQ,8BAApB,sBAGA,cAAC,IAAD,CACEP,KAAMjB,EAAOD,aAAe,OAAS,WACrCmB,MAAOlB,EAAOJ,SACduB,UAhDgBZ,EAgDW,WAhDF,SAACkB,GAClCxB,EAAU,2BAAKD,GAAN,kBAAeO,EAAOkB,EAAML,OAAOF,WAgDpCQ,aACE,cAAC,IAAD,CAAgBC,SAAS,MAAzB,SACE,cAAC,IAAD,CACEnB,UAAWC,IAAOmB,WAClB,aAAW,6BACXC,QAlDgB,WAC9B5B,EAAU,2BAAKD,GAAN,IAAcD,cAAeC,EAAOD,iBAkD/B+B,YA/CgB,SAACL,GAC/BA,EAAMV,kBA+CQgB,KAAK,MALP,SAOG/B,EAAOD,aAAe,cAAC,IAAD,IAAiB,cAAC,IAAD,QAI9CiC,WAAY,QAIhB,cAAC,IAAD,CACExB,UAAWC,IAAOwB,OAClBC,SAAUhC,EACVe,KAAK,SACLM,QAAQ,YAJV","file":"static/js/4.983b4fa8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport * as authOperations from \"redux/auth/authOperations\";\r\n\r\nexport default function PositionedSnackbar({ element, message }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [state, setState] = React.useState({\r\n    open: true,\r\n    vertical: \"top\",\r\n    horizontal: \"center\",\r\n  });\r\n\r\n  const { vertical, horizontal, open } = state;\r\n\r\n  const handleClose = () => {\r\n    setState({ ...state, open: false });\r\n    switch (element) {\r\n      case \"logInUserRejected\":\r\n        dispatch(authOperations.logInUserRejected());\r\n        break;\r\n\r\n      case \"registerUserRejected\":\r\n        dispatch(authOperations.registerUserRejected());\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical, horizontal }}\r\n        open={open}\r\n        onClose={handleClose}\r\n        message={message}\r\n        key={vertical + horizontal}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logIn\":\"LogInView_logIn__1FtlD\",\"email\":\"LogInView_email__11QPj\",\"password\":\"LogInView_password__1gtl4\",\"button\":\"LogInView_button__2B6Pv\"};","import { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport * as authOperations from \"redux/auth/authOperations\";\r\nimport { authSelectors } from \"redux/auth\";\r\nimport PositionedSnackbar from \"../Snackbar\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\n\r\nimport styles from \"./LogInView.module.css\";\r\n\r\nexport default function LogInView() {\r\n  const [values, setValues] = useState({\r\n    amount: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    weight: \"\",\r\n    weightRange: \"\",\r\n    showPassword: false,\r\n  });\r\n\r\n  const isButtonDisable = values.email === \"\" || values.password === \"\";\r\n  const logInUserRejected = useSelector(authSelectors.logInUserRejected);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.logInUserRejected());\r\n  }, [dispatch]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      authOperations.logIn({ email: values.email, password: values.password })\r\n    );\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const PassHandleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {logInUserRejected && (\r\n        <PositionedSnackbar\r\n          element=\"logInUserRejected\"\r\n          message=\"Error, something went wrong, try again\"\r\n        />\r\n      )}\r\n      <form\r\n        className={styles.logIn}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <TextField\r\n          className={styles.email}\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={values.email}\r\n          onChange={handleChange}\r\n          size=\"small\"\r\n          label=\"Email\"\r\n          variant=\"outlined\"\r\n        />\r\n\r\n        <FormControl\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          className={styles.password}\r\n        >\r\n          <InputLabel htmlFor=\"outlined-adornment-password\">\r\n            Password\r\n          </InputLabel>\r\n          <OutlinedInput\r\n            type={values.showPassword ? \"text\" : \"password\"}\r\n            value={values.password}\r\n            onChange={PassHandleChange(\"password\")}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  className={styles.iconButton}\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                  edge=\"end\"\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n            labelWidth={70}\r\n          />\r\n        </FormControl>\r\n\r\n        <Button\r\n          className={styles.button}\r\n          disabled={isButtonDisable}\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n        >\r\n          Log in\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}